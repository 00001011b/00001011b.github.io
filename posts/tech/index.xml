<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>落魄山</title>
    <link>https://00001011b.github.io/posts/tech/</link>
    <description>Recent content on 落魄山</description>
    <image>
      <url>https://00001011b.github.io/images/author.jpg</url>
      <link>https://00001011b.github.io/images/author.jpg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 26 Jun 2023 23:39:45 +0800</lastBuildDate><atom:link href="https://00001011b.github.io/posts/tech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>关于 C 语言里的 specifier 和 qualifier</title>
      <link>https://00001011b.github.io/posts/tech/%E5%85%B3%E4%BA%8Ec%E8%AF%AD%E8%A8%80%E9%87%8C%E7%9A%84specifier%E5%92%8Cqualifier/</link>
      <pubDate>Mon, 26 Jun 2023 23:39:45 +0800</pubDate>
      
      <guid>https://00001011b.github.io/posts/tech/%E5%85%B3%E4%BA%8Ec%E8%AF%AD%E8%A8%80%E9%87%8C%E7%9A%84specifier%E5%92%8Cqualifier/</guid>
      <description>在C编程中，“specifier”（指示符）和“qualifier”（限定符）是两个具有不同含义的概念： 指示符（Specifier）：在C编</description>
    </item>
    
    <item>
      <title>从 ANSI Standart 的角度，解释 const 和 volatile 的区别</title>
      <link>https://00001011b.github.io/posts/tech/%E4%BB%8Eansi-standart%E7%9A%84%E8%A7%92%E5%BA%A6%E8%A7%A3%E9%87%8Aconst%E5%92%8Cvolatile%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sun, 18 Jun 2023 14:34:33 +0800</pubDate>
      
      <guid>https://00001011b.github.io/posts/tech/%E4%BB%8Eansi-standart%E7%9A%84%E8%A7%92%E5%BA%A6%E8%A7%A3%E9%87%8Aconst%E5%92%8Cvolatile%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>当我阅读《The C programming language, second edition》 SECTION A8.2 (page 211) 时看到下面一段话，谈论的是 const 与 volatile 的对象与编译器优化相关的问题。 The const and volatile properties are new with the ANSI Standart. The purpose of const</description>
    </item>
    
    <item>
      <title>理解和区分 C 语言的 structure 和 union</title>
      <link>https://00001011b.github.io/posts/tech/%E7%90%86%E8%A7%A3%E5%92%8C%E5%8C%BA%E5%88%86c%E8%AF%AD%E8%A8%80%E7%9A%84structure%E5%92%8Cunion/</link>
      <pubDate>Sat, 17 Jun 2023 00:04:46 +0800</pubDate>
      
      <guid>https://00001011b.github.io/posts/tech/%E7%90%86%E8%A7%A3%E5%92%8C%E5%8C%BA%E5%88%86c%E8%AF%AD%E8%A8%80%E7%9A%84structure%E5%92%8Cunion/</guid>
      <description>在C语言中，structure（结构体）和union（联合体）是用于组织和存储不同类型数据的方式。它们有相似之处，但也有一些关键的区别。 St</description>
    </item>
    
    <item>
      <title>从底层逻辑去理解 C 语言的枚举类型</title>
      <link>https://00001011b.github.io/posts/tech/%E4%BB%8E%E5%BA%95%E5%B1%82%E9%80%BB%E8%BE%91%E5%8E%BB%E7%90%86%E8%A7%A3c%E8%AF%AD%E8%A8%80%E7%9A%84%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 12 Jun 2023 22:51:40 +0800</pubDate>
      
      <guid>https://00001011b.github.io/posts/tech/%E4%BB%8E%E5%BA%95%E5%B1%82%E9%80%BB%E8%BE%91%E5%8E%BB%E7%90%86%E8%A7%A3c%E8%AF%AD%E8%A8%80%E7%9A%84%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B/</guid>
      <description>快速知道枚举 在C语言中，枚举（enumeration）是一种用户自定义的数据类型，用于定义一组具有离散取值的常量。枚举类型可以帮助程序员提高</description>
    </item>
    
    <item>
      <title>理解 C 语言变量</title>
      <link>https://00001011b.github.io/posts/tech/%E7%90%86%E8%A7%A3c%E8%AF%AD%E8%A8%80%E5%8F%98%E9%87%8F/</link>
      <pubDate>Sun, 11 Jun 2023 14:03:41 +0800</pubDate>
      
      <guid>https://00001011b.github.io/posts/tech/%E7%90%86%E8%A7%A3c%E8%AF%AD%E8%A8%80%E5%8F%98%E9%87%8F/</guid>
      <description>变量（value）是标识符（identifier）的一个子集。因此在讲变量之前，先要说一下标识符（identifier）。 1、标识符 标识符，</description>
    </item>
    
    <item>
      <title>物理定律的内涵与外延</title>
      <link>https://00001011b.github.io/posts/tech/%E7%89%A9%E7%90%86%E5%AE%9A%E5%BE%8B%E7%9A%84%E5%86%85%E6%B6%B5%E4%B8%8E%E5%A4%96%E5%BB%B6/</link>
      <pubDate>Thu, 24 Nov 2022 08:39:15 +0800</pubDate>
      
      <guid>https://00001011b.github.io/posts/tech/%E7%89%A9%E7%90%86%E5%AE%9A%E5%BE%8B%E7%9A%84%E5%86%85%E6%B6%B5%E4%B8%8E%E5%A4%96%E5%BB%B6/</guid>
      <description>学习物理的时候，应试教育将我我们的视野及思维牢牢钉死在物理公式上。事实上，物理定律是具备本身的内涵与外延的，如果不懂/不知道这些，学习物理定</description>
    </item>
    
    <item>
      <title>Excel 计算周岁</title>
      <link>https://00001011b.github.io/posts/tech/excel%E8%AE%A1%E7%AE%97%E5%91%A8%E5%B2%81/</link>
      <pubDate>Tue, 13 Sep 2022 11:14:58 +0800</pubDate>
      
      <guid>https://00001011b.github.io/posts/tech/excel%E8%AE%A1%E7%AE%97%E5%91%A8%E5%B2%81/</guid>
      <description>计算周岁时，并不是简单地用当前年份减去出生年份，而是要考虑到年、月和日三方面的因素。也就是很多人说的，生日还没到，还没满18岁。😁 日期格式 因</description>
    </item>
    
    <item>
      <title>Hugo 的安装，使用，及恢复</title>
      <link>https://00001011b.github.io/posts/tech/hugo%E5%AE%89%E8%A3%85%E7%BB%B4%E6%8A%A4%E5%8F%8A%E6%81%A2%E5%A4%8D/</link>
      <pubDate>Fri, 19 Aug 2022 13:21:53 +0800</pubDate>
      
      <guid>https://00001011b.github.io/posts/tech/hugo%E5%AE%89%E8%A3%85%E7%BB%B4%E6%8A%A4%E5%8F%8A%E6%81%A2%E5%A4%8D/</guid>
      <description>如题，本文分成三个部分来撰写。以下全文基于 Ubuntu 18.05 编写。 一、安装 因为 hugo 依赖于 golang，因此，在安装 hugo 之前，先要安装 golang。以下是安装 golang</description>
    </item>
    
    <item>
      <title>说说模式规划</title>
      <link>https://00001011b.github.io/posts/tech/%E8%AF%B4%E8%AF%B4%E6%A8%A1%E5%BC%8F%E8%A7%84%E5%88%92/</link>
      <pubDate>Fri, 27 May 2022 07:45:46 +0800</pubDate>
      
      <guid>https://00001011b.github.io/posts/tech/%E8%AF%B4%E8%AF%B4%E6%A8%A1%E5%BC%8F%E8%A7%84%E5%88%92/</guid>
      <description>说说模式的主要目的是取代 qq 空间、朋友圈、微博、微信。 在 BluePrint 阶段，由于“说说本身的简短性”，我一直在思考是将所有说说放在同一个文件夹里，按年来分</description>
    </item>
    
  </channel>
</rss>
